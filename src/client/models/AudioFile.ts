/* tslint:disable */
/* eslint-disable */
/**
 * audioserve API
 * REST API for audioserve
 *
 * The version of the OpenAPI document: 1.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AudioFileMeta } from './AudioFileMeta';
import {
    AudioFileMetaFromJSON,
    AudioFileMetaFromJSONTyped,
    AudioFileMetaToJSON,
    AudioFileMetaToJSONTyped,
} from './AudioFileMeta';
import type { AudioFileSection } from './AudioFileSection';
import {
    AudioFileSectionFromJSON,
    AudioFileSectionFromJSONTyped,
    AudioFileSectionToJSON,
    AudioFileSectionToJSONTyped,
} from './AudioFileSection';

/**
 * 
 * @export
 * @interface AudioFile
 */
export interface AudioFile {
    /**
     * 
     * @type {string}
     * @memberof AudioFile
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof AudioFile
     */
    path: string;
    /**
     * 
     * @type {AudioFileMeta}
     * @memberof AudioFile
     */
    meta?: AudioFileMeta | null;
    /**
     * Mime type of audio file (before transcoding)
     * @type {string}
     * @memberof AudioFile
     */
    mime: string;
    /**
     * 
     * @type {AudioFileSection}
     * @memberof AudioFile
     */
    section?: AudioFileSection | null;
}

/**
 * Check if a given object implements the AudioFile interface.
 */
export function instanceOfAudioFile(value: object): value is AudioFile {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('path' in value) || value['path'] === undefined) return false;
    if (!('mime' in value) || value['mime'] === undefined) return false;
    return true;
}

export function AudioFileFromJSON(json: any): AudioFile {
    return AudioFileFromJSONTyped(json, false);
}

export function AudioFileFromJSONTyped(json: any, ignoreDiscriminator: boolean): AudioFile {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'path': json['path'],
        'meta': json['meta'] == null ? undefined : AudioFileMetaFromJSON(json['meta']),
        'mime': json['mime'],
        'section': json['section'] == null ? undefined : AudioFileSectionFromJSON(json['section']),
    };
}

export function AudioFileToJSON(json: any): AudioFile {
    return AudioFileToJSONTyped(json, false);
}

export function AudioFileToJSONTyped(value?: AudioFile | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'path': value['path'],
        'meta': AudioFileMetaToJSON(value['meta']),
        'mime': value['mime'],
        'section': AudioFileSectionToJSON(value['section']),
    };
}

