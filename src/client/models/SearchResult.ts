/* tslint:disable */
/* eslint-disable */
/**
 * audioserve API
 * REST API for audioserve
 *
 * The version of the OpenAPI document: 1.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AudioFile } from './AudioFile';
import {
    AudioFileFromJSON,
    AudioFileFromJSONTyped,
    AudioFileToJSON,
    AudioFileToJSONTyped,
} from './AudioFile';
import type { Subfolder } from './Subfolder';
import {
    SubfolderFromJSON,
    SubfolderFromJSONTyped,
    SubfolderToJSON,
    SubfolderToJSONTyped,
} from './Subfolder';

/**
 * 
 * @export
 * @interface SearchResult
 */
export interface SearchResult {
    /**
     * Not used now, only subfolders are searched
     * @type {Array<AudioFile>}
     * @memberof SearchResult
     */
    files?: Array<AudioFile>;
    /**
     * 
     * @type {Array<Subfolder>}
     * @memberof SearchResult
     */
    subfolders?: Array<Subfolder>;
}

/**
 * Check if a given object implements the SearchResult interface.
 */
export function instanceOfSearchResult(value: object): value is SearchResult {
    return true;
}

export function SearchResultFromJSON(json: any): SearchResult {
    return SearchResultFromJSONTyped(json, false);
}

export function SearchResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): SearchResult {
    if (json == null) {
        return json;
    }
    return {
        
        'files': json['files'] == null ? undefined : ((json['files'] as Array<any>).map(AudioFileFromJSON)),
        'subfolders': json['subfolders'] == null ? undefined : ((json['subfolders'] as Array<any>).map(SubfolderFromJSON)),
    };
}

export function SearchResultToJSON(json: any): SearchResult {
    return SearchResultToJSONTyped(json, false);
}

export function SearchResultToJSONTyped(value?: SearchResult | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'files': value['files'] == null ? undefined : ((value['files'] as Array<any>).map(AudioFileToJSON)),
        'subfolders': value['subfolders'] == null ? undefined : ((value['subfolders'] as Array<any>).map(SubfolderToJSON)),
    };
}

