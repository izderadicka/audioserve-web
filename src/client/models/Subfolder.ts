/* tslint:disable */
/* eslint-disable */
/**
 * audioserve API
 * REST API for audioserve
 *
 * The version of the OpenAPI document: 1.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Subfolder
 */
export interface Subfolder {
    /**
     * 
     * @type {string}
     * @memberof Subfolder
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Subfolder
     */
    path: string;
    /**
     * Is virtual folder - e.g. representing big chapterized file (.m4b etc.)
     * @type {boolean}
     * @memberof Subfolder
     */
    isFile?: boolean;
    /**
     * last modification timestamp (unix time in miliseconds)
     * @type {number}
     * @memberof Subfolder
     */
    modified?: number;
    /**
     * was folder listened to the end (by given group, valid only if group parameter was provided)
     * @type {boolean}
     * @memberof Subfolder
     */
    finished?: boolean;
}

/**
 * Check if a given object implements the Subfolder interface.
 */
export function instanceOfSubfolder(value: object): value is Subfolder {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('path' in value) || value['path'] === undefined) return false;
    return true;
}

export function SubfolderFromJSON(json: any): Subfolder {
    return SubfolderFromJSONTyped(json, false);
}

export function SubfolderFromJSONTyped(json: any, ignoreDiscriminator: boolean): Subfolder {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'path': json['path'],
        'isFile': json['is_file'] == null ? undefined : json['is_file'],
        'modified': json['modified'] == null ? undefined : json['modified'],
        'finished': json['finished'] == null ? undefined : json['finished'],
    };
}

export function SubfolderToJSON(json: any): Subfolder {
    return SubfolderToJSONTyped(json, false);
}

export function SubfolderToJSONTyped(value?: Subfolder | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'path': value['path'],
        'is_file': value['isFile'],
        'modified': value['modified'],
        'finished': value['finished'],
    };
}

