/* tslint:disable */
/* eslint-disable */
/**
 * audioserve API
 * REST API for audioserve
 *
 * The version of the OpenAPI document: 1.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface AuthenticatePostRequest {
    secret: string;
}

/**
 * 
 */
export class AuthenticationApi extends runtime.BaseAPI {

    /**
     * Authentication to server via salted shared secret  Salted shared secret is calculated as:   * shared secret is encoded as UTF-8 bytes   * client generates 32 random bytes   * secret is concatenated with random bytes (secret+random_bytes)   * these bytes are hashed with SHA-256   * random bytes are encoded with base64 encoding   * hash is encoded with base64 encoding   * resulting secret is string concation of three strings : \"encoded random\" + \"|\" + \"encoded hash\"
     */
    async authenticatePostRaw(requestParameters: AuthenticatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['secret'] == null) {
            throw new runtime.RequiredError(
                'secret',
                'Required parameter "secret" was null or undefined when calling authenticatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
            { contentType: 'application/json' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['secret'] != null) {
            formParams.append('secret', requestParameters['secret'] as any);
        }

        const response = await this.request({
            path: `/authenticate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Authentication to server via salted shared secret  Salted shared secret is calculated as:   * shared secret is encoded as UTF-8 bytes   * client generates 32 random bytes   * secret is concatenated with random bytes (secret+random_bytes)   * these bytes are hashed with SHA-256   * random bytes are encoded with base64 encoding   * hash is encoded with base64 encoding   * resulting secret is string concation of three strings : \"encoded random\" + \"|\" + \"encoded hash\"
     */
    async authenticatePost(requestParameters: AuthenticatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.authenticatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
